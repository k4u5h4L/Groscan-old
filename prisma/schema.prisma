// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?

  updatedAt DateTime @default(now())

  accounts  Account[]
  sessions  Session[]
  groceries Grocery[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grocery {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  barcode      String   @unique
  name         String
  desc         String?
  status       Status   @default(UPCOMING)
  userId       String
  image        String
  manufactured DateTime @default(now())
  expiry       DateTime

  updatedAt DateTime @default(now())

  categoryIDs String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  desc       String?
  icon       String
  groceryIDs String[] @db.ObjectId

  updatedAt DateTime @default(now())

  groceries Grocery[] @relation(fields: [groceryIDs], references: [id])
}

enum Status {
  UPCOMING
  EXPIRED
  CONSUMED
}
